#!/usr/bin/env ruby
# frozen_string_literal: true

# (c) 2019, 2020 The Society of Research Software Engineering
#
# Authors: Robert Haines and Mark Turner

require 'rubygems'
require 'bundler'
require 'csv'
require 'erb'
require 'tilt'
require 'optparse'

# Helper method for exiting on error.
def abort(message)
  warn message
  exit 1
end

# Our report template.
REPORTS = ['report.md', 'report-redacted.md'].freeze

# Parse options.
options = {
  cutoff: 6,
  year: Time.now.year
}

opts = OptionParser.new do |opt|
  opt.banner = 'Usage: report [options] <csv members file> <csv voters file>'
  opt.separator '  Validate and report on SocRSE Trustee Voting. [options]:'

  opt.on(
    '-cN', '--cutoff=N', 'How many candidates to elect. ' \
    "Default: #{options[:cutoff]}."
  ) do |val|
    options[:cutoff] = val.chomp.to_i
  end
  opt.on(
    '-yN', '--year=N', 'Set the year for the report. ' \
    "Default: #{options[:year]}."
  ) do |val|
    options[:year] = val.chomp.to_i
  end

  opt.on_tail('-h', '-?', '--help', 'Show this help message.') do
    puts opts
    exit
  end
end
opts.parse! ARGV

# Do we have enough arguments left?
abort opts unless ARGV.length == 2

options[:members] = ARGV[0].chomp
options[:voters] = ARGV[1].chomp

# Read the list of society members.
unless ::File.readable? options[:members]
  abort "Cannot read input file '#{options[:members]}'."
end
members_data = ::File.read(options[:members])

# Read the list of voters.
unless ::File.readable? options[:voters]
  abort "Cannot read input file '#{options[:voters]}'."
end
voters_data = ::File.read(options[:voters])

# If at this point we have no data, then...
abort opts if members_data.empty? || voters_data.empty?

members = ::CSV.new(members_data, headers: true)
voters = ::CSV.new(voters_data, headers: true)

# Grab all of the valid members into one long list.
# Also, count the number members and non-members.
all_members = []
num_members = 0
num_nonmembers = 0
members.each do |row|
  if row[22] == 'Valid'
    all_members << row[5].downcase
    num_members += 1
  else
    num_nonmembers += 1
  end
end

# Loop through the voters and check membership validity.
# Store two lists of valid and invalid votes.
valid_votes = []
invalid_votes = []
voters.each do |voter|
  if all_members.include?(voter[2].downcase)
    valid_votes << voter
  else
    invalid_votes << voter
  end
end

# Grab all of the valid votes cast into one long list.
all_votes = []
valid_votes.each do |row|
  all_votes += row[3].split(',').map(&:strip)
end

# Calculate voter turnout from valid votes and membership list
turnout = (valid_votes.length.to_f / all_members.length.to_f) * 100.to_f

# Bucket the votes by name, and reverse sort by bucket value.
vote_buckets = all_votes.each_with_object(Hash.new(0)) do |name, bucket|
  bucket[name] += 1
end.sort_by(&:last).reverse

# Double check that we don't have more than 6 votes per person.
votes_pp = all_votes.length / valid_votes.length
abort "Too many votes per person (#{votes_pp})" if votes_pp > 6

# Double check that the amount of votes in all buckets matches the
# total number of votes cast.
total_bucket_votes = vote_buckets.map(&:last).sum
if total_bucket_votes != all_votes.length
  abort 'Number of votes mismatched after bucketing ' \
    "(#{total_bucket_votes} but should be #{all_votes.length})"
end

report = {
  year: options[:year],
  num_members: all_members.length,
  num_valid_votes: valid_votes.length,
  num_invalid_votes: invalid_votes.length,
  turnout: turnout,
  results:
    [vote_buckets[0...options[:cutoff]], vote_buckets[options[:cutoff]..-1]],
  invalid: invalid_votes
}

REPORTS.each do |name|
  temp = ::File.expand_path("#{name}.erb", ::File.join(__dir__, 'templates'))
  output = ::File.expand_path(name, __dir__)
  ::File.write(output, Tilt.new(temp).render(self, report: report))
end
